type User {
  id: ID!
  name: String
  email: String
  password: String
  invoices: [Invoice]
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  invoices: [CreateInvoiceInput]
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

input WhereInput {
  AND: [WhereInput]
  OR: [WhereInput]
  NOT: [WhereInput]
  contains: String
  startsWith: String
  endsWith: String
  equals: String
  in: [String]
  notIn: [String]
}

input UserFilter {
  id: WhereInput
  name: WhereInput
  email: WhereInput
}

input UserFilterInput {
  skip: Int
  take: Int
  where: UserFilter
  cursor: UserFilter
  orderBy: UserFilter
}

type Query {
  users(params: UserFilterInput): [User]!
  user(id: ID!): User
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: ID!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: ID!): User
}