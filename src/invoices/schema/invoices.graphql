type Invoice {
  id: ID!
  vendorName: String
  amount: Float
  dueDate: String
  description: String
  userId: ID
  user: User
  paid: Boolean
}

input CreateInvoiceInput {
  vendorName: String!
  amount: Float!
  dueDate: String!
  description: String!
  paid: Boolean!
  userId: ID!
}

input UpdateInvoiceInput {
  vendorName: String
  amount: Float
  dueDate: String
  description: String
  userId: ID
  paid: Boolean
}

input WhereInput {
  AND: [WhereInput]
  OR: [WhereInput]
  NOT: [WhereInput]
  contains: String
  startsWith: String
  endsWith: String
  equals: String
  in: [String]
  notIn: [String]
}

input InvoiceFilter {
  id: WhereInput
  name: WhereInput
  email: WhereInput
}

input InvoiceFilterInput {
  skip: Int
  take: Int
  where: UserFilter
  cursor: UserFilter
  orderBy: UserFilter
}

type Query {
  invoices(params: InvoiceFilterInput): [Invoice]!
  invoice(id: ID!): Invoice
}

type Mutation {
  createInvoice(createInvoiceInput: CreateInvoiceInput!): Invoice!
  updateInvoice(id: ID!, updateInvoiceInput: UpdateInvoiceInput!): Invoice!
  removeInvoice(id: ID!): Invoice
}